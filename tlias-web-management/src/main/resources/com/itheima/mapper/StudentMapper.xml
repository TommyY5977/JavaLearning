<!--定义Mapper映射文件的约束和基本结构-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itheima.mapper.StudentMapper">
    <select id="findAll" resultType="com.itheima.pojo.Student">
        select
            s.name, s.no, c.name clazzName,
            s.gender, s.phone, s.degree, s.address,
            s.violation_count, s.violation_score,
            s.update_time
        from student as s
        left join clazz as c on s.clazz_id = c.id
        <where>
            <if test="name != null and name != ''">
                and s.name like concat('%',#{name},'%')
            </if>
            <if test="degree != null">
                and s.degree = #{degree}
            </if>
            <if test="clazzId != null">
                and s.clazz_id = #{clazzId}
            </if>
        </where>
    </select>

    <select id="addStudent">
        insert into student
            (name, no, gender, phone, degree, address, clazz_id, graduation_date, id_card,
             is_college, update_time, violation_count, violation_score, create_time)
        values
            (#{name}, #{no}, #{gender}, #{phone}, #{degree},
             #{address}, #{clazzId}, #{graduationDate}, #{idCard},
             #{isCollege}, #{updateTime}, #{violationCount},
             #{violationScore}, #{createTime})
    </select>

    <select id="getStudentById" resultType="com.itheima.pojo.Student">
        select s.name, s.no, s.gender, s.phone, s.id_card, s.is_college,
               s.address, s.degree, s.graduation_date, c.name as clazz_name
        from student s left join clazz c on s.clazz_id = c.id
        where s.id = #{id}
    </select>

    <select id="deleteStudentById">
        delete from student where id = #{id}
    </select>

    <select id="getStudentData" resultType="java.util.Map">
        select
            (case
                when clazz_id = 1 then 'JavaEE就业163期'
                when clazz_id = 2 then '前端就业90期'
                when clazz_id = 3 then 'JavaEE就业165期'
                when clazz_id = 4 then 'JavaEE就业166期'
                when clazz_id = 5 then '大数据就业58期'
                when clazz_id = 6 then 'JavaEE就业167期'
                when clazz_id = 7 then 'Java44'
                when clazz_id = 8 then '少而思关容'
                when clazz_id = 9 then 'Java速成计划'
                else '其他' end
            ) clazz,
            count(*) total
        from student
        group by clazz_id
        order by total
    </select>

    <select id="countDegreeData" resultType="java.util.Map">
        select
            (case
                when degree=1 then '初中'
                when degree=2 then '高中'
                when degree=3 then '专科'
                when degree=4 then '本科'
                when degree=5 then '硕士'
                else '其他' end
            ) degree,
            count(*) value
        from student
        group by degree
    </select>
</mapper>